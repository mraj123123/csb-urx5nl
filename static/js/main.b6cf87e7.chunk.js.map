{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js","food.module.css"],"names":["Recipe","props","className","style","food","src","image","alt","label","class","title","ingredients","map","i","text","calory","myStyle","href","url","linkStyle","target","role","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","fetch","response","json","data","hits","console","log","margin","display","fontSize","fontWeight","onSubmit","e","preventDefault","placeholder","type","value","onChange","recipe","calories","healthLabels","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"wOA6BeA,MA1Bf,SAAgBC,GACd,OACE,sBAAKC,UAAWC,IAAMC,KAAtB,UACE,qBAAKC,IAAKJ,EAAMK,MAAOJ,UAAWC,IAAMG,MAAOC,IAAKN,EAAMO,QAC1D,sBAAKC,MAAM,YAAX,UACE,6BAAKR,EAAMS,QACX,6BACGT,EAAMU,YAAYC,KAAI,SAACC,GAAD,OACrB,6BAAKA,EAAEC,MADc,MAIzB,oBAAGZ,UAAU,mBAAb,wBAA4CD,EAAMc,aAEpD,wBAAQb,UAAWC,IAAMa,QAAzB,SACE,mBACEC,KAAMhB,EAAMiB,IACZhB,UAAWC,IAAMgB,UACjBC,OAAO,SACPC,KAAK,SAJP,6BAWP,ECyCcC,G,MAjEH,WACV,IAGA,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,cAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,GACD,GAAE,CAACH,IAEJ,IAAMG,EAAU,iDAAG,gHACMC,MAAM,mCAAD,OACSJ,EADT,mBAZf,WAYe,oBAXd,qCAUG,cACXK,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBV,EAAWU,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANA,2CAAH,qDAmBhB,OACE,sBAAKlC,UAAU,MAAf,UACE,sBAAKA,UAAU,cAAcC,MAAO,CAAEoC,OAAQ,QAA9C,UACE,oBAAIpC,MAAO,CAAEqC,QAAS,UAAtB,oCACA,oBAAIrC,MAAO,CAAEsC,SAAU,MAAOC,WAAY,UAA1C,6BAEF,uBAAMC,SAZQ,SAACC,GACjBA,EAAEC,iBACFhB,EAASH,GACTC,EAAU,GACX,EAQ8BzB,UAAU,cAArC,UACE,uBACE4C,YAAY,kBACZ5C,UAAU,aACV6C,KAAK,OACLC,MAAOtB,EACPuB,SAtBa,SAACL,GACpBjB,EAAUiB,EAAExB,OAAO4B,MACpB,IAsBK,wBAAQ9C,UAAU,gBAAgB6C,KAAK,SAAvC,uBAIF,qBAAK7C,UAAU,UAAf,SACGsB,EAAQZ,KAAI,SAACsC,GAAD,OACX,cAAC,EAAD,CAEExC,MAAOwC,EAAOA,OAAO1C,MACrBG,YAAauC,EAAOA,OAAOvC,YAC3BwC,SAAUD,EAAOA,OAAOC,SACxB7C,MAAO4C,EAAOA,OAAO5C,MACrB8C,aAAcF,EAAOA,OAAOE,cALvBF,EAAOA,OAAO1C,MAFV,QAapB,GCvDmB6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,YACd,IACAC,OAAM,SAACC,GACNjC,QAAQiC,MAAMA,EAAMC,QACrB,G,oBEzIPC,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,QAAU,sBAAsB,UAAY,wB","file":"static/js/main.b6cf87e7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport style from \"./food.module.css\";\r\n\r\nfunction Recipe(props) {\r\n  return (\r\n    <div className={style.food}>\r\n      <img src={props.image} className={style.image} alt={props.label}></img>\r\n      <div class=\"card-body\">\r\n        <h2>{props.title}</h2>\r\n        <ul>\r\n          {props.ingredients.map((i) => (\r\n            <li>{i.text}</li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"font-weight-bold\"> Calories: {props.calory}</p>\r\n      </div>\r\n      <button className={style.myStyle}>\r\n        <a\r\n          href={props.url}\r\n          className={style.linkStyle}\r\n          target=\"_blank\"\r\n          role=\"button\"\r\n        >\r\n          View Recipe\r\n        </a>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\n\nconst App = () => {\n  const APP_ID = \"5356d460\";\n  const APP_KEY = \"000e634ee221f3cc3fe235e57022402b\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"vegetables\");\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"subheadline\" style={{ margin: \"15px\" }}>\n        <h1 style={{ display: \"inline\" }}>Healthy and nutritious</h1>\n        <h3 style={{ fontSize: \"2em\", fontWeight: \"bolder\" }}>food recipes</h3>\n      </div>\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          placeholder=\"smoothie, salad\"\n          className=\"search-bar\"\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className=\"search-button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map((recipe) => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            ingredients={recipe.recipe.ingredients}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            healthLabels={recipe.recipe.healthLabels}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"food\":\"food_food__2iiWI\",\"image\":\"food_image__3rvT6\",\"myStyle\":\"food_myStyle__Km_t2\",\"linkStyle\":\"food_linkStyle__32n0K\"};"],"sourceRoot":""}